// Mocks generated by Mockito 5.4.2 from annotations
// in features/test/helpers/init_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:core/core.dart' as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:features/data/data_source/remote_movies_data_source_impl.dart'
    as _i4;
import 'package:features/data/models/movie_details/movie_details_response.dart'
    as _i8;
import 'package:features/data/models/movies_response.dart' as _i7;
import 'package:features/data/repository/movies_repository_impl.dart' as _i9;
import 'package:features/domain/entity/movie_details_entity.dart' as _i11;
import 'package:features/domain/entity/movie_entity.dart' as _i10;
import 'package:features/domain/repository/movies_repository.dart' as _i3;
import 'package:features/domain/use_cases/fetch_latest_movies_use_case.dart'
    as _i13;
import 'package:features/domain/use_cases/fetch_movie_details_use_case.dart'
    as _i16;
import 'package:features/domain/use_cases/fetch_popular_movies_use_case.dart'
    as _i12;
import 'package:features/domain/use_cases/fetch_top_rated_movies_use_case.dart'
    as _i14;
import 'package:features/domain/use_cases/fetch_upcoming_movies_use_case.dart'
    as _i15;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMoviesRepository_1 extends _i1.SmartFake
    implements _i3.MoviesRepository {
  _FakeMoviesRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteMoviesDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteMoviesDataSourceImpl extends _i1.Mock
    implements _i4.RemoteMoviesDataSourceImpl {
  MockRemoteMoviesDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.MoviesResponse>> fetchLatestMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchLatestMovies,
          [],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i7.MoviesResponse>>.value(
                _FakeEither_0<_i6.Failure, _i7.MoviesResponse>(
          this,
          Invocation.method(
            #fetchLatestMovies,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.MoviesResponse>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.MoviesResponse>>
      fetchPopularMovies() => (super.noSuchMethod(
            Invocation.method(
              #fetchPopularMovies,
              [],
            ),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.MoviesResponse>>.value(
                    _FakeEither_0<_i6.Failure, _i7.MoviesResponse>(
              this,
              Invocation.method(
                #fetchPopularMovies,
                [],
              ),
            )),
          ) as _i5.Future<_i2.Either<_i6.Failure, _i7.MoviesResponse>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.MoviesResponse>>
      fetchTopRatedMovies() => (super.noSuchMethod(
            Invocation.method(
              #fetchTopRatedMovies,
              [],
            ),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.MoviesResponse>>.value(
                    _FakeEither_0<_i6.Failure, _i7.MoviesResponse>(
              this,
              Invocation.method(
                #fetchTopRatedMovies,
                [],
              ),
            )),
          ) as _i5.Future<_i2.Either<_i6.Failure, _i7.MoviesResponse>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.MoviesResponse>>
      fetchUpcomingMovies() => (super.noSuchMethod(
            Invocation.method(
              #fetchUpcomingMovies,
              [],
            ),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.MoviesResponse>>.value(
                    _FakeEither_0<_i6.Failure, _i7.MoviesResponse>(
              this,
              Invocation.method(
                #fetchUpcomingMovies,
                [],
              ),
            )),
          ) as _i5.Future<_i2.Either<_i6.Failure, _i7.MoviesResponse>>);
  @override
  _i5.Future<
      _i2.Either<_i6.Failure, _i8.MovieDetailsResponse>> fetchMovieDetails(
          {required int? movieId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMovieDetails,
          [],
          {#movieId: movieId},
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i8.MovieDetailsResponse>>.value(
                _FakeEither_0<_i6.Failure, _i8.MovieDetailsResponse>(
          this,
          Invocation.method(
            #fetchMovieDetails,
            [],
            {#movieId: movieId},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i8.MovieDetailsResponse>>);
}

/// A class which mocks [MoviesRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesRepositoryImpl extends _i1.Mock
    implements _i9.MoviesRepositoryImpl {
  MockMoviesRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>
      fetchLatestMovies() => (super.noSuchMethod(
            Invocation.method(
              #fetchLatestMovies,
              [],
            ),
            returnValue: _i5
                .Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>.value(
                _FakeEither_0<_i6.Failure, List<_i10.MovieEntity>>(
              this,
              Invocation.method(
                #fetchLatestMovies,
                [],
              ),
            )),
          ) as _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>
      fetchPopularMovies() => (super.noSuchMethod(
            Invocation.method(
              #fetchPopularMovies,
              [],
            ),
            returnValue: _i5
                .Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>.value(
                _FakeEither_0<_i6.Failure, List<_i10.MovieEntity>>(
              this,
              Invocation.method(
                #fetchPopularMovies,
                [],
              ),
            )),
          ) as _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>
      fetchTopRatedMovies() => (super.noSuchMethod(
            Invocation.method(
              #fetchTopRatedMovies,
              [],
            ),
            returnValue: _i5
                .Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>.value(
                _FakeEither_0<_i6.Failure, List<_i10.MovieEntity>>(
              this,
              Invocation.method(
                #fetchTopRatedMovies,
                [],
              ),
            )),
          ) as _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>
      fetchUpcomingMovies() => (super.noSuchMethod(
            Invocation.method(
              #fetchUpcomingMovies,
              [],
            ),
            returnValue: _i5
                .Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>.value(
                _FakeEither_0<_i6.Failure, List<_i10.MovieEntity>>(
              this,
              Invocation.method(
                #fetchUpcomingMovies,
                [],
              ),
            )),
          ) as _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i11.MovieDetailsEntity>>
      fetchMovieDetails({required int? movieId}) => (super.noSuchMethod(
            Invocation.method(
              #fetchMovieDetails,
              [],
              {#movieId: movieId},
            ),
            returnValue: _i5
                .Future<_i2.Either<_i6.Failure, _i11.MovieDetailsEntity>>.value(
                _FakeEither_0<_i6.Failure, _i11.MovieDetailsEntity>(
              this,
              Invocation.method(
                #fetchMovieDetails,
                [],
                {#movieId: movieId},
              ),
            )),
          ) as _i5.Future<_i2.Either<_i6.Failure, _i11.MovieDetailsEntity>>);
}

/// A class which mocks [FetchPopularMoviesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchPopularMoviesUseCase extends _i1.Mock
    implements _i12.FetchPopularMoviesUseCase {
  MockFetchPopularMoviesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MoviesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMoviesRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.MoviesRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>.value(
                _FakeEither_0<_i6.Failure, List<_i10.MovieEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>);
}

/// A class which mocks [FetchLatestMoviesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchLatestMoviesUseCase extends _i1.Mock
    implements _i13.FetchLatestMoviesUseCase {
  MockFetchLatestMoviesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MoviesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMoviesRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.MoviesRepository);
  @override
  _i5.Stream<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i5.Stream<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>.empty(),
      ) as _i5.Stream<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>);
}

/// A class which mocks [FetchTopRatedMoviesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchTopRatedMoviesUseCase extends _i1.Mock
    implements _i14.FetchTopRatedMoviesUseCase {
  MockFetchTopRatedMoviesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MoviesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMoviesRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.MoviesRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>.value(
                _FakeEither_0<_i6.Failure, List<_i10.MovieEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>);
}

/// A class which mocks [FetchUpcomingMoviesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchUpcomingMoviesUseCase extends _i1.Mock
    implements _i15.FetchUpcomingMoviesUseCase {
  MockFetchUpcomingMoviesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MoviesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMoviesRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.MoviesRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>.value(
                _FakeEither_0<_i6.Failure, List<_i10.MovieEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i10.MovieEntity>>>);
}

/// A class which mocks [FetchMovieDetailsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchMovieDetailsUseCase extends _i1.Mock
    implements _i16.FetchMovieDetailsUseCase {
  MockFetchMovieDetailsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MoviesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMoviesRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.MoviesRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i11.MovieDetailsEntity>> execute(
          {required int? movieId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#movieId: movieId},
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i11.MovieDetailsEntity>>.value(
                _FakeEither_0<_i6.Failure, _i11.MovieDetailsEntity>(
          this,
          Invocation.method(
            #execute,
            [],
            {#movieId: movieId},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i11.MovieDetailsEntity>>);
}
